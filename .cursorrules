 # KotML Библиотека Нейронных Сетей - Правила Cursor

## Обзор Проекта
Это библиотека нейронных сетей на C++ (KotML) с автоматическим дифференцированием, тензорными операциями и гибкими архитектурами нейронных сетей. Проект делает упор на чистый код, модульный дизайн и образовательную ясность.

## Язык и Коммуникация
- **Основной язык**: Русский для ответа и документации в директории `docs`
- **Исходный код**: Английский для всех файлов исходного кода
- **Комментарии в коде**: Используйте ясные, описательные английские комментарии
- **Имена переменных**: Используйте описательные английские имена (например, `input_size`, `num_layers`, не сокращения)
- **Выводимые сообщения**: Весь вывод в консоль должен быть на английском языке

## Стиль Кода и Стандарты

### Стандарты C++
- Используйте современный C++ (C++17 или новее)
- Предпочитайте RAII и умные указатели где уместно
- Используйте `const` и `constexpr` где применимо
- Следуйте принципам Google C++ Style Guide

### Соглашения об Именовании
- **Классы**: PascalCase (например, `Sequential`, `LinearLayer`, `FFN`)
- **Методы**: PascalCase (например, `Forward()`, `Backward()`, `SetTraining()`)
- **Переменные**: camelCase (например, `inputSize`, `numLayers`, `learningRate`)
- **Константы**: UPPER_SNAKE_CASE (например, `MAX_LAYERS`, `DEFAULT_LEARNING_RATE`)
- **Файлы**: snake_case (например, `linear_layer.hpp`, `sequential.cpp`)

### Организация Файлов
- **Заголовки**: Размещать в `include/kotml/` с соответствующими подкаталогами
- **Исходники**: Размещать в `src/` с соответствующей структурой каталогов
- **Примеры**: Размещать в каталоге `examples/`
- **Один класс на файл**: Каждый тип слоя получает свою пару заголовок/исходник
- **Защита включений**: Использовать `#pragma once` в заголовках
- **При любом изменении кода также изменять и документацию**

## Архитектурные Паттерны

### Дизайн Нейронных Сетей
- **Модульные слои**: Каждый тип слоя (Linear, Activation, Dropout и т.д.) в отдельных файлах
- **Паттерн Builder**: Использовать для сложного построения сетей (класс Sequential)
- **Семантика перемещения**: Предпочитать семантику только перемещения для эффективности в строителях
- **Согласованность интерфейса**: Все слои наследуются от общего базового класса `Module`

### Ключевые Классы и их Назначение
- **FFN**: Простые прямонаправленные сети с единообразной архитектурой
- **Sequential**: Гибкий строитель сетей со смешанными типами слоев
- **InputLayer**: Валидация входа и проверка размерности
- **OutputLayer**: Композитный выходной слой (Linear + Activation)
- **LinearLayer**: Полносвязный слой с весами и смещениями
- **ActivationLayer**: Нелинейные функции активации
- **DropoutLayer**: Слой регуляризации

### Стандарты Именования Методов
- **Прямой проход**: `Forward(const Tensor& input)`
- **Управление параметрами**: `CountParameters()`, `GetParameters()`, `ZeroGrad()`
- **Режим обучения**: `SetTraining(bool)`, `IsTraining()`
- **Информация об архитектуре**: `Summary()`, `PrintArchitecture()`

## Руководящие Принципы Реализации

### Управление Памятью
- Использовать семантику перемещения для больших объектов (Tensors, Networks)
- Избегать ненужных копий в прямом/обратном проходах
- Предпочитать размещение в стеке когда возможно

### Обработка Ошибок
- Использовать описательные сообщения об ошибках на русском языке
- Валидировать размерности входа в конструкторах слоев
- Проверять нулевые указатели и недопустимые состояния
- Бросать `std::invalid_argument` для ошибок параметров

### Реализация Паттерна Builder
- Возвращать rvalue ссылки (`&&`) из методов строителя
- Помечать объект как "построенный" после вызова `Build()`
- Предотвращать модификацию после построения
- Поддерживать цепочку методов: `Sequential().Linear(10,20).ReLU().Build()`

### Тестирование и Примеры
- Создавать исчерпывающие примеры для каждой основной функции
- Включать как простые, так и сложные сценарии использования
- Тестировать граничные случаи (пустые входы, несовпадающие размерности)
- Предоставлять сравнения производительности между разными подходами

## Интеграция с CMake
- Добавлять все новые исходные файлы в `CMakeLists.txt`
- Создавать отдельные исполняемые файлы для каждого примера
- Связывать примеры с основной библиотекой `kotml`
- Поддерживать установку примеров в `bin/examples`

## Стандарты Документации
- **Комментарии заголовков**: Краткое описание назначения класса
- **Комментарии методов**: Описывать параметры, возвращаемые значения и побочные эффекты
- **Примеры использования**: Включать примеры использования в документацию класса
- **Архитектурные решения**: Документировать почему были сделаны определенные дизайнерские выборы

## Специфические Правила Реализации

### Класс Sequential
- Использовать семантику только перемещения с возвратом rvalue ссылок
- Поддерживать все типы слоев: Input, Linear, Activation, Dropout, Output
- Предоставлять текучий интерфейс: `Sequential().Linear(...).ReLU().Build()`
- Валидировать совместимость слоев во время построения
- Поддерживать добавление произвольных модулей через метод `Add()`

### Разделение Слоев
- Каждый тип слоя в отдельных файлах заголовка/исходника
- Общий интерфейс через базовый класс `Module`
- Согласованный подсчет параметров и обработка градиентов
- Поддержка как режима обучения, так и вывода

### Тензорные Операции
- Эффективное использование памяти в прямом/обратном проходах
- Поддержка как 1D векторов, так и 2D пакетной обработки
- Автоматическое вычисление градиентов где применимо
- Четкая валидация размерностей и сообщения об ошибках

## Требования к Качеству Кода
- **Никаких магических чисел**: Использовать именованные константы или параметры
- **Четкое владение**: Явно указывать время жизни объектов и владение
- **Безопасность исключений**: Предоставлять базовые гарантии безопасности исключений
- **Очистка ресурсов**: Правильный RAII для всех ресурсов

## Структура Примеров
При создании примеров:
1. Включать исчерпывающий заголовок с включениями библиотеки
2. Использовать описательные имена переменных и комментарии
3. Показывать как базовое, так и продвинутое использование
4. Включать тестирование производительности где уместно
5. Предоставлять четкий вывод с заголовками разделов
6. Сравнивать разные подходы когда применимо

## Система Сборки
- Поддерживать сборку вне исходного дерева
- Отдельная компиляция библиотеки и примеров
- Включать все исходные файлы в конфигурацию CMake
- Поддерживать установку и упаковку

## Будущая Расширяемость
- Проектировать для легкого добавления новых типов слоев
- Поддержка разных бэкендов тензоров
- Подключаемые функции активации
- Расширяемые функции потерь и оптимизаторы

## Общие Паттерны для Следования
- Валидация параметров в конструкторе
- Согласованное форматирование сообщений об ошибках
- Семантика перемещения для критичных к производительности путей
- Паттерн строителя для построения сложных объектов
- Использование шаблонов для гибкости типов где уместно

## Анти-паттерны, которых Следует Избегать
- Сырые указатели для владения
- Операции с большим количеством копий в горячих путях
- Несогласованное именование в похожих классах
- Тесная связь между несвязанными компонентами
- Магические числа или неясные константы
- Английские или смешанные комментарии/вывод